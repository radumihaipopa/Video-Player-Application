{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MihaiPopa\\\\WebstormProjects\\\\video-player-application\\\\src\\\\components\\\\ProgressBar.js\";\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport debounce from 'lodash.debounce';\nconst ProgressBar = _ref => {\n  let {\n    videoRef\n  } = _ref;\n  const progressRef = useRef(null);\n  const scrubberRef = useRef(null);\n  const [isScrubbing, setIsScrubbing] = useState(false);\n  const handleScrubberMouseMove = useCallback(debounce(event => {\n    if (isScrubbing) {\n      const progressBar = progressRef.current;\n      const progressBarWidth = progressBar.offsetWidth;\n      const clickPosition = event.clientX - progressBar.getBoundingClientRect().left;\n      const clickPercentage = clickPosition / progressBarWidth * 100;\n      const seekTime = clickPercentage * videoRef.current.duration / 100;\n      if (!isNaN(seekTime) && isFinite(seekTime)) {\n        videoRef.current.currentTime = seekTime;\n      }\n    }\n  }, 200), [isScrubbing]);\n  useEffect(() => {\n    const scrubberElement = scrubberRef.current;\n    const handleScrubberMouseDown = () => {\n      setIsScrubbing(true);\n      videoRef.current.pause();\n    };\n    const handleScrubberMouseUp = () => {\n      setIsScrubbing(false);\n      videoRef.current.play();\n    };\n    scrubberElement.addEventListener('mousedown', handleScrubberMouseDown);\n    scrubberElement.addEventListener('mouseup', handleScrubberMouseUp);\n    scrubberElement.addEventListener('mousemove', handleScrubberMouseMove);\n    return () => {\n      scrubberElement.removeEventListener('mousedown', handleScrubberMouseDown);\n      scrubberElement.removeEventListener('mouseup', handleScrubberMouseUp);\n      scrubberElement.removeEventListener('mousemove', handleScrubberMouseMove.cancel);\n    };\n  }, [videoRef, handleScrubberMouseMove]);\n  const updateProgressBar = useCallback(() => {\n    const progressElement = progressRef.current;\n    const scrubberElement = scrubberRef.current;\n    const progressPercentage = videoRef.current.currentTime / videoRef.current.duration * 100;\n    const scrubberPosition = `${progressPercentage}%`;\n    progressElement.style.width = scrubberPosition;\n    scrubberElement.style.left = scrubberPosition;\n  }, [videoRef]);\n  useEffect(() => {\n    const video = videoRef.current;\n    video.addEventListener('timeupdate', updateProgressBar);\n    return () => {\n      video.removeEventListener('timeupdate', updateProgressBar);\n    };\n  }, [videoRef, updateProgressBar]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    ref: progressRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scrubber\",\n    ref: scrubberRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }));\n};\nexport default ProgressBar;","map":{"version":3,"names":["React","useRef","useState","useEffect","useCallback","debounce","ProgressBar","_ref","videoRef","progressRef","scrubberRef","isScrubbing","setIsScrubbing","handleScrubberMouseMove","event","progressBar","current","progressBarWidth","offsetWidth","clickPosition","clientX","getBoundingClientRect","left","clickPercentage","seekTime","duration","isNaN","isFinite","currentTime","scrubberElement","handleScrubberMouseDown","pause","handleScrubberMouseUp","play","addEventListener","removeEventListener","cancel","updateProgressBar","progressElement","progressPercentage","scrubberPosition","style","width","video","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["C:/Users/MihaiPopa/WebstormProjects/video-player-application/src/components/ProgressBar.js"],"sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from 'react';\r\nimport debounce from 'lodash.debounce';\r\n\r\nconst ProgressBar = ({ videoRef }) => {\r\n    const progressRef = useRef(null);\r\n    const scrubberRef = useRef(null);\r\n    const [isScrubbing, setIsScrubbing] = useState(false);\r\n\r\n    const handleScrubberMouseMove = useCallback(\r\n        debounce((event) => {\r\n            if (isScrubbing) {\r\n                const progressBar = progressRef.current;\r\n                const progressBarWidth = progressBar.offsetWidth;\r\n                const clickPosition = event.clientX - progressBar.getBoundingClientRect().left;\r\n                const clickPercentage = (clickPosition / progressBarWidth) * 100;\r\n                const seekTime = (clickPercentage * videoRef.current.duration) / 100;\r\n\r\n                if (!isNaN(seekTime) && isFinite(seekTime)) {\r\n                    videoRef.current.currentTime = seekTime;\r\n                }\r\n            }\r\n        }, 200),\r\n        [isScrubbing]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const scrubberElement = scrubberRef.current;\r\n\r\n        const handleScrubberMouseDown = () => {\r\n            setIsScrubbing(true);\r\n            videoRef.current.pause();\r\n        };\r\n\r\n        const handleScrubberMouseUp = () => {\r\n            setIsScrubbing(false);\r\n            videoRef.current.play();\r\n        };\r\n\r\n        scrubberElement.addEventListener('mousedown', handleScrubberMouseDown);\r\n        scrubberElement.addEventListener('mouseup', handleScrubberMouseUp);\r\n        scrubberElement.addEventListener('mousemove', handleScrubberMouseMove);\r\n\r\n        return () => {\r\n            scrubberElement.removeEventListener('mousedown', handleScrubberMouseDown);\r\n            scrubberElement.removeEventListener('mouseup', handleScrubberMouseUp);\r\n            scrubberElement.removeEventListener('mousemove', handleScrubberMouseMove.cancel);\r\n        };\r\n    }, [videoRef, handleScrubberMouseMove]);\r\n\r\n    const updateProgressBar = useCallback(() => {\r\n        const progressElement = progressRef.current;\r\n        const scrubberElement = scrubberRef.current;\r\n\r\n        const progressPercentage = (videoRef.current.currentTime / videoRef.current.duration) * 100;\r\n        const scrubberPosition = `${progressPercentage}%`;\r\n\r\n        progressElement.style.width = scrubberPosition;\r\n        scrubberElement.style.left = scrubberPosition;\r\n    }, [videoRef]);\r\n\r\n    useEffect(() => {\r\n        const video = videoRef.current;\r\n        video.addEventListener('timeupdate', updateProgressBar);\r\n\r\n        return () => {\r\n            video.removeEventListener('timeupdate', updateProgressBar);\r\n        };\r\n    }, [videoRef, updateProgressBar]);\r\n\r\n    return (\r\n        <div className=\"progress-bar\">\r\n            <div className=\"progress\" ref={progressRef} />\r\n            <div className=\"scrubber\" ref={scrubberRef} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;"],"mappings":"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"},"metadata":{},"sourceType":"module"}