{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MihaiPopa\\\\WebstormProjects\\\\video-player-application\\\\src\\\\components\\\\VideoPlayer.js\";\n/*\nIf you are using server-side rendering, remember that this component should be loaded on client-side\nshaka player needs to be loaded on client-side, loading it on server-side may lead to error or undesired results\n*/\n\n/*\nimporting dependencies and CSS file(s) required for UI customization\n*/\nimport React from 'react';\nimport 'shaka-player/dist/controls.css';\nconst shaka = require('shaka-player/dist/shaka-player.ui.js');\n\n//Creating class component\nclass VideoPlayer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    //Creating reference to store video component on DOM\n    this.videoComponent = React.createRef();\n\n    //Creating reference to store video container on DOM\n    this.videoContainer = React.createRef();\n\n    //Initializing reference to error handlers\n    this.onErrorEvent = this.onErrorEvent.bind(this);\n    this.onError = this.onError.bind(this);\n  }\n  onErrorEvent(event) {\n    // Extract the shaka.util.Error object from the event.\n    this.onError(event.detail);\n  }\n  onError(error) {\n    // Log the error.\n    console.error('Error code', error.code, 'object', error);\n  }\n  componentDidMount() {\n    //Link to MPEG-DASH video\n    var manifestUri = 'https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd';\n\n    //Getting reference to video and video container on DOM\n    const video = this.videoComponent.current;\n    const videoContainer = this.videoContainer.current;\n\n    //Initialize shaka player\n    var player = new shaka.Player(video);\n\n    //Setting up shaka player UI\n    const ui = new shaka.ui.Overlay(player, videoContainer, video);\n    ui.getControls();\n\n    // Listen for error events.\n    player.addEventListener('error', this.onErrorEvent);\n\n    // Try to load a manifest.\n    // This is an asynchronous process.\n    player.load(manifestUri).then(function () {\n      // This runs if the asynchronous load is successful.\n      console.log('The video has now been loaded!');\n    }).catch(this.onError); // onError is executed if the asynchronous load fails.\n  }\n\n  render() {\n    /*\n    Returning video with a container. Remember, when setting up shaka player with custom UI, you must\n    add your video component inside a container\n    The container will be used by shaka player to add your customized UI for the player\n    */\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"video-container\",\n      ref: this.videoContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      className: \"shaka-video\",\n      ref: this.videoComponent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }\n    }));\n  }\n}\nexport default VideoPlayer;","map":{"version":3,"names":["React","shaka","require","VideoPlayer","PureComponent","constructor","props","videoComponent","createRef","videoContainer","onErrorEvent","bind","onError","event","detail","error","console","code","componentDidMount","manifestUri","video","current","player","Player","ui","Overlay","getControls","addEventListener","load","then","log","catch","render","createElement","className","ref","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/MihaiPopa/WebstormProjects/video-player-application/src/components/VideoPlayer.js"],"sourcesContent":["/*\nIf you are using server-side rendering, remember that this component should be loaded on client-side\nshaka player needs to be loaded on client-side, loading it on server-side may lead to error or undesired results\n*/\n\n\n/*\nimporting dependencies and CSS file(s) required for UI customization\n*/\nimport React from 'react';\nimport 'shaka-player/dist/controls.css';\nconst shaka = require('shaka-player/dist/shaka-player.ui.js');\n\n//Creating class component\nclass VideoPlayer extends React.PureComponent{\n\n\tconstructor(props){\n\n\t\tsuper(props);\n\n\t\t//Creating reference to store video component on DOM\n\t\tthis.videoComponent = React.createRef();\n\n\t\t//Creating reference to store video container on DOM\n\t\tthis.videoContainer = React.createRef();\n\n\t\t//Initializing reference to error handlers\n\t\tthis.onErrorEvent = this.onErrorEvent.bind(this);\n\t\tthis.onError = this.onError.bind(this);\n\t}\n\n\tonErrorEvent(event) {\n\t  // Extract the shaka.util.Error object from the event.\n\t  this.onError(event.detail);\n\t}\n\n\tonError(error) {\n\t  // Log the error.\n\t  console.error('Error code', error.code, 'object', error);\n\t}\n\n\tcomponentDidMount(){\n\n\t\t//Link to MPEG-DASH video\n\t\tvar manifestUri = 'https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd';\n\n\t\t//Getting reference to video and video container on DOM\n\t\tconst video = this.videoComponent.current;\n\t\tconst videoContainer = this.videoContainer.current;\n\n\t\t//Initialize shaka player\n\t\tvar player = new shaka.Player(video);\n\t\t  \n\t\t//Setting up shaka player UI\n      \tconst ui = new shaka.ui.Overlay(player, videoContainer, video);\n      \tui.getControls();\n\n\t\t// Listen for error events.\n  \t\tplayer.addEventListener('error', this.onErrorEvent);\n\n  \t\t// Try to load a manifest.\n\t  \t// This is an asynchronous process.\n\t  \tplayer.load(manifestUri).then(function() {\n\t\t    // This runs if the asynchronous load is successful.\n\t\t    console.log('The video has now been loaded!');\n\t  \t}).catch(this.onError);  // onError is executed if the asynchronous load fails.\n\n\t}\n\n\trender(){\n\n\t\t/*\n\t\tReturning video with a container. Remember, when setting up shaka player with custom UI, you must\n\t\tadd your video component inside a container\n\t\tThe container will be used by shaka player to add your customized UI for the player\n\t\t*/\n\t\treturn(\n\t\t\t<div className=\"video-container\" ref={this.videoContainer}>\n\t\t\t\t<video \n\t\t\t\t\tclassName=\"shaka-video\"\n\t\t\t\t\tref={this.videoComponent}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default VideoPlayer;\n"],"mappings":";AAAA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,gCAAgC;AACvC,MAAMC,KAAK,GAAGC,OAAO,CAAC,sCAAsC,CAAC;;AAE7D;AACA,MAAMC,WAAW,SAASH,KAAK,CAACI,aAAa;EAE5CC,WAAWA,CAACC,KAAK,EAAC;IAEjB,KAAK,CAACA,KAAK,CAAC;;IAEZ;IACA,IAAI,CAACC,cAAc,GAAGP,KAAK,CAACQ,SAAS,CAAC,CAAC;;IAEvC;IACA,IAAI,CAACC,cAAc,GAAGT,KAAK,CAACQ,SAAS,CAAC,CAAC;;IAEvC;IACA,IAAI,CAACE,YAAY,GAAG,IAAI,CAACA,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC;IAChD,IAAI,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACD,IAAI,CAAC,IAAI,CAAC;EACvC;EAEAD,YAAYA,CAACG,KAAK,EAAE;IAClB;IACA,IAAI,CAACD,OAAO,CAACC,KAAK,CAACC,MAAM,CAAC;EAC5B;EAEAF,OAAOA,CAACG,KAAK,EAAE;IACb;IACAC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACE,IAAI,EAAE,QAAQ,EAAEF,KAAK,CAAC;EAC1D;EAEAG,iBAAiBA,CAAA,EAAE;IAElB;IACA,IAAIC,WAAW,GAAG,qEAAqE;;IAEvF;IACA,MAAMC,KAAK,GAAG,IAAI,CAACb,cAAc,CAACc,OAAO;IACzC,MAAMZ,cAAc,GAAG,IAAI,CAACA,cAAc,CAACY,OAAO;;IAElD;IACA,IAAIC,MAAM,GAAG,IAAIrB,KAAK,CAACsB,MAAM,CAACH,KAAK,CAAC;;IAEpC;IACK,MAAMI,EAAE,GAAG,IAAIvB,KAAK,CAACuB,EAAE,CAACC,OAAO,CAACH,MAAM,EAAEb,cAAc,EAAEW,KAAK,CAAC;IAC9DI,EAAE,CAACE,WAAW,CAAC,CAAC;;IAErB;IACEJ,MAAM,CAACK,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACjB,YAAY,CAAC;;IAEnD;IACA;IACAY,MAAM,CAACM,IAAI,CAACT,WAAW,CAAC,CAACU,IAAI,CAAC,YAAW;MACvC;MACAb,OAAO,CAACc,GAAG,CAAC,gCAAgC,CAAC;IAC/C,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAACnB,OAAO,CAAC,CAAC,CAAE;EAE5B;;EAEAoB,MAAMA,CAAA,EAAE;IAEP;AACF;AACA;AACA;AACA;IACE,oBACChC,KAAA,CAAAiC,aAAA;MAAKC,SAAS,EAAC,iBAAiB;MAACC,GAAG,EAAE,IAAI,CAAC1B,cAAe;MAAA2B,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACzDzC,KAAA,CAAAiC,aAAA;MACCC,SAAS,EAAC,aAAa;MACvBC,GAAG,EAAE,IAAI,CAAC5B,cAAe;MAAA6B,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACzB,CACG,CAAC;EAER;AACD;AAEA,eAAetC,WAAW"},"metadata":{},"sourceType":"module"}