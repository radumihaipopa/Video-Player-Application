{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MihaiPopa\\\\WebstormProjects\\\\video-player-application\\\\src\\\\components\\\\ProgressBar.js\";\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport debounce from 'lodash.debounce';\nconst ProgressBar = _ref => {\n  let {\n    videoRef\n  } = _ref;\n  const progressRef = useRef(null);\n  const scrubberRef = useRef(null);\n  const [isScrubbing, setIsScrubbing] = useState(false);\n  const handleScrubberMouseDown = () => {\n    setIsScrubbing(true);\n    videoRef.current.pause();\n  };\n  const handleScrubberMouseUp = () => {\n    setIsScrubbing(false);\n    videoRef.current.play();\n  };\n  const handleScrubberMouseMove = useCallback(debounce(event => {\n    if (isScrubbing) {\n      const progressWidth = progressRef.current.offsetWidth;\n      const clickPosition = event.clientX - progressRef.current.getBoundingClientRect().left;\n      const clickPercentage = clickPosition / progressWidth * 100;\n      const seekTime = clickPercentage * videoRef.current.duration / 100;\n      videoRef.current.currentTime = seekTime;\n    }\n  }, 200), [isScrubbing]);\n  useEffect(() => {\n    const scrubberElement = scrubberRef.current;\n    scrubberElement.addEventListener('mousedown', handleScrubberMouseDown);\n    scrubberElement.addEventListener('mouseup', handleScrubberMouseUp);\n    scrubberElement.addEventListener('mousemove', handleScrubberMouseMove);\n    return () => {\n      scrubberElement.removeEventListener('mousedown', handleScrubberMouseDown);\n      scrubberElement.removeEventListener('mouseup', handleScrubberMouseUp);\n      scrubberElement.removeEventListener('mousemove', handleScrubberMouseMove.cancel);\n    };\n  }, [handleScrubberMouseDown, handleScrubberMouseUp, handleScrubberMouseMove]);\n  const updateProgressBar = useCallback(() => {\n    const progressElement = progressRef.current;\n    const scrubberElement = scrubberRef.current;\n    const progressPercentage = videoRef.current.currentTime / videoRef.current.duration * 100;\n    const scrubberPosition = `${progressPercentage}%`;\n    progressElement.style.width = scrubberPosition;\n    scrubberElement.style.left = scrubberPosition;\n  }, [videoRef]);\n  useEffect(() => {\n    videoRef.current.addEventListener('timeupdate', updateProgressBar);\n    return () => {\n      videoRef.current.removeEventListener('timeupdate', updateProgressBar);\n    };\n  }, [videoRef, updateProgressBar]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    ref: progressRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scrubber\",\n    ref: scrubberRef,\n    onMouseDown: handleScrubberMouseDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }));\n};\nexport default ProgressBar;","map":{"version":3,"names":["React","useRef","useState","useEffect","useCallback","debounce","ProgressBar","_ref","videoRef","progressRef","scrubberRef","isScrubbing","setIsScrubbing","handleScrubberMouseDown","current","pause","handleScrubberMouseUp","play","handleScrubberMouseMove","event","progressWidth","offsetWidth","clickPosition","clientX","getBoundingClientRect","left","clickPercentage","seekTime","duration","currentTime","scrubberElement","addEventListener","removeEventListener","cancel","updateProgressBar","progressElement","progressPercentage","scrubberPosition","style","width","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","onMouseDown"],"sources":["C:/Users/MihaiPopa/WebstormProjects/video-player-application/src/components/ProgressBar.js"],"sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from 'react';\r\nimport debounce from 'lodash.debounce';\r\n\r\nconst ProgressBar = ({ videoRef }) => {\r\n    const progressRef = useRef(null);\r\n    const scrubberRef = useRef(null);\r\n    const [isScrubbing, setIsScrubbing] = useState(false);\r\n\r\n    const handleScrubberMouseDown = () => {\r\n        setIsScrubbing(true);\r\n        videoRef.current.pause();\r\n    };\r\n\r\n    const handleScrubberMouseUp = () => {\r\n        setIsScrubbing(false);\r\n        videoRef.current.play();\r\n    };\r\n\r\n    const handleScrubberMouseMove = useCallback(\r\n        debounce((event) => {\r\n            if (isScrubbing) {\r\n                const progressWidth = progressRef.current.offsetWidth;\r\n                const clickPosition = event.clientX - progressRef.current.getBoundingClientRect().left;\r\n                const clickPercentage = (clickPosition / progressWidth) * 100;\r\n                const seekTime = (clickPercentage * videoRef.current.duration) / 100;\r\n\r\n                videoRef.current.currentTime = seekTime;\r\n            }\r\n        }, 200),\r\n        [isScrubbing]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const scrubberElement = scrubberRef.current;\r\n\r\n        scrubberElement.addEventListener('mousedown', handleScrubberMouseDown);\r\n        scrubberElement.addEventListener('mouseup', handleScrubberMouseUp);\r\n        scrubberElement.addEventListener('mousemove', handleScrubberMouseMove);\r\n\r\n        return () => {\r\n            scrubberElement.removeEventListener('mousedown', handleScrubberMouseDown);\r\n            scrubberElement.removeEventListener('mouseup', handleScrubberMouseUp);\r\n            scrubberElement.removeEventListener('mousemove', handleScrubberMouseMove.cancel);\r\n        };\r\n    }, [handleScrubberMouseDown, handleScrubberMouseUp, handleScrubberMouseMove]);\r\n\r\n    const updateProgressBar = useCallback(() => {\r\n        const progressElement = progressRef.current;\r\n        const scrubberElement = scrubberRef.current;\r\n\r\n        const progressPercentage = (videoRef.current.currentTime / videoRef.current.duration) * 100;\r\n        const scrubberPosition = `${progressPercentage}%`;\r\n\r\n        progressElement.style.width = scrubberPosition;\r\n        scrubberElement.style.left = scrubberPosition;\r\n    }, [videoRef]);\r\n\r\n    useEffect(() => {\r\n        videoRef.current.addEventListener('timeupdate', updateProgressBar);\r\n\r\n        return () => {\r\n            videoRef.current.removeEventListener('timeupdate', updateProgressBar);\r\n        };\r\n    }, [videoRef, updateProgressBar]);\r\n\r\n    return (\r\n        <div className=\"progress-bar\">\r\n            <div className=\"progress\" ref={progressRef} />\r\n            <div className=\"scrubber\" ref={scrubberRef} onMouseDown={handleScrubberMouseDown} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;"],"mappings":"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"},"metadata":{},"sourceType":"module"}