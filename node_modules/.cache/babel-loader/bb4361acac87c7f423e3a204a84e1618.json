{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MihaiPopa\\\\WebstormProjects\\\\video-player-application\\\\src\\\\components\\\\ProgressBar.js\";\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport throttle from 'lodash.throttle';\nconst ProgressBar = _ref => {\n  let {\n    videoRef\n  } = _ref;\n  const innerProgressRef = useRef(null);\n  const scrubberRef = useRef(null);\n  const progressContainerRef = useRef(null);\n  const [isScrubbing, setIsScrubbing] = useState(false);\n  const [scrubberPosition, setScrubberPosition] = useState(0);\n  const updateProgressBar = useCallback(throttle(() => {\n    const innerProgress = innerProgressRef.current;\n    const scrubber = scrubberRef.current;\n    const currentTime = videoRef.current.currentTime;\n    const duration = videoRef.current.duration;\n    const progressPercentage = currentTime / duration * 100;\n    innerProgress.style.width = `${progressPercentage}%`;\n    scrubber.style.left = `${progressPercentage}%`;\n  }, 200), [videoRef]);\n  const handleScrubberMouseDown = useCallback(() => {\n    setIsScrubbing(true);\n  }, []);\n  const handleMouseMove = useCallback(event => {\n    if (!isScrubbing) return;\n    const progressContainer = progressContainerRef.current;\n    const progressWidth = progressContainer.offsetWidth;\n    const clickPosition = event.clientX - progressContainer.getBoundingClientRect().left;\n    const clickPercentage = clickPosition / progressWidth * 100;\n    const scrubberWidth = scrubberRef.current.offsetWidth;\n    const newScrubberPosition = clickPercentage - scrubberWidth / 2 / progressWidth * 100;\n    setScrubberPosition(newScrubberPosition);\n  }, [isScrubbing]);\n  const handleMouseUp = useCallback(() => {\n    if (isScrubbing) {\n      setIsScrubbing(false);\n      const scrubber = scrubberRef.current;\n      const progressContainer = progressContainerRef.current;\n      const progressWidth = progressContainer.offsetWidth;\n      const clickPercentage = (scrubberPosition + scrubber.offsetWidth / 2 / progressWidth) * 100;\n      const seekTime = clickPercentage * videoRef.current.duration / 100;\n      videoRef.current.currentTime = seekTime;\n    }\n  }, [isScrubbing, scrubberPosition, videoRef]);\n  useEffect(() => {\n    const video = videoRef.current;\n    video.addEventListener('timeupdate', updateProgressBar);\n    return () => {\n      video.removeEventListener('timeupdate', updateProgressBar);\n    };\n  }, [videoRef, updateProgressBar]);\n  useEffect(() => {\n    const progressContainer = progressContainerRef.current;\n    progressContainer.addEventListener('mousemove', handleMouseMove);\n    progressContainer.addEventListener('mouseup', handleMouseUp);\n    return () => {\n      progressContainer.removeEventListener('mousemove', handleMouseMove);\n      progressContainer.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [handleMouseMove, handleMouseUp]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    ref: progressContainerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inner-progress\",\n    ref: innerProgressRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scrubber\",\n    ref: scrubberRef,\n    style: {\n      left: `${scrubberPosition}%`\n    },\n    onMouseDown: handleScrubberMouseDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  })));\n};\nexport default ProgressBar;","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","throttle","ProgressBar","_ref","videoRef","innerProgressRef","scrubberRef","progressContainerRef","isScrubbing","setIsScrubbing","scrubberPosition","setScrubberPosition","updateProgressBar","innerProgress","current","scrubber","currentTime","duration","progressPercentage","style","width","left","handleScrubberMouseDown","handleMouseMove","event","progressContainer","progressWidth","offsetWidth","clickPosition","clientX","getBoundingClientRect","clickPercentage","scrubberWidth","newScrubberPosition","handleMouseUp","seekTime","video","addEventListener","removeEventListener","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","onMouseDown"],"sources":["C:/Users/MihaiPopa/WebstormProjects/video-player-application/src/components/ProgressBar.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\r\nimport throttle from 'lodash.throttle';\r\n\r\nconst ProgressBar = ({ videoRef }) => {\r\n    const innerProgressRef = useRef(null);\r\n    const scrubberRef = useRef(null);\r\n    const progressContainerRef = useRef(null);\r\n    const [isScrubbing, setIsScrubbing] = useState(false);\r\n    const [scrubberPosition, setScrubberPosition] = useState(0);\r\n\r\n    const updateProgressBar = useCallback(\r\n        throttle(() => {\r\n            const innerProgress = innerProgressRef.current;\r\n            const scrubber = scrubberRef.current;\r\n            const currentTime = videoRef.current.currentTime;\r\n            const duration = videoRef.current.duration;\r\n            const progressPercentage = (currentTime / duration) * 100;\r\n\r\n            innerProgress.style.width = `${progressPercentage}%`;\r\n            scrubber.style.left = `${progressPercentage}%`;\r\n        }, 200),\r\n        [videoRef]\r\n    );\r\n\r\n    const handleScrubberMouseDown = useCallback(() => {\r\n        setIsScrubbing(true);\r\n    }, []);\r\n\r\n    const handleMouseMove = useCallback(\r\n        (event) => {\r\n            if (!isScrubbing) return;\r\n\r\n            const progressContainer = progressContainerRef.current;\r\n            const progressWidth = progressContainer.offsetWidth;\r\n            const clickPosition = event.clientX - progressContainer.getBoundingClientRect().left;\r\n            const clickPercentage = (clickPosition / progressWidth) * 100;\r\n            const scrubberWidth = scrubberRef.current.offsetWidth;\r\n            const newScrubberPosition = clickPercentage - (scrubberWidth / 2 / progressWidth) * 100;\r\n\r\n            setScrubberPosition(newScrubberPosition);\r\n        },\r\n        [isScrubbing]\r\n    );\r\n\r\n    const handleMouseUp = useCallback(() => {\r\n        if (isScrubbing) {\r\n            setIsScrubbing(false);\r\n\r\n            const scrubber = scrubberRef.current;\r\n            const progressContainer = progressContainerRef.current;\r\n            const progressWidth = progressContainer.offsetWidth;\r\n            const clickPercentage = (scrubberPosition + scrubber.offsetWidth / 2 / progressWidth) * 100;\r\n            const seekTime = (clickPercentage * videoRef.current.duration) / 100;\r\n\r\n            videoRef.current.currentTime = seekTime;\r\n        }\r\n    }, [isScrubbing, scrubberPosition, videoRef]);\r\n\r\n    useEffect(() => {\r\n        const video = videoRef.current;\r\n\r\n        video.addEventListener('timeupdate', updateProgressBar);\r\n\r\n        return () => {\r\n            video.removeEventListener('timeupdate', updateProgressBar);\r\n        };\r\n    }, [videoRef, updateProgressBar]);\r\n\r\n    useEffect(() => {\r\n        const progressContainer = progressContainerRef.current;\r\n\r\n        progressContainer.addEventListener('mousemove', handleMouseMove);\r\n        progressContainer.addEventListener('mouseup', handleMouseUp);\r\n\r\n        return () => {\r\n            progressContainer.removeEventListener('mousemove', handleMouseMove);\r\n            progressContainer.removeEventListener('mouseup', handleMouseUp);\r\n        };\r\n    }, [handleMouseMove, handleMouseUp]);\r\n\r\n    return (\r\n        <div className=\"progress-bar\">\r\n            <div className=\"progress\" ref={progressContainerRef}>\r\n                <div className=\"inner-progress\" ref={innerProgressRef} />\r\n                <div\r\n                    className=\"scrubber\"\r\n                    ref={scrubberRef}\r\n                    style={{ left: `${scrubberPosition}%` }}\r\n                    onMouseDown={handleScrubberMouseDown}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;"],"mappings":"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"},"metadata":{},"sourceType":"module"}