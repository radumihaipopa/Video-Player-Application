{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MihaiPopa\\\\WebstormProjects\\\\video-player-application\\\\src\\\\components\\\\ProgressBar.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nconst ProgressBar = _ref => {\n  let {\n    videoRef\n  } = _ref;\n  const innerProgressRef = useRef(null);\n  const scrubberRef = useRef(null);\n  const progressContainerRef = useRef(null);\n  const [isScrubbing, setIsScrubbing] = useState(false);\n  const handleProgressBarClick = event => {\n    const progress = event.currentTarget;\n    const progressWidth = progress.offsetWidth;\n    const clickPosition = event.clientX - progress.getBoundingClientRect().left;\n    const clickPercentage = clickPosition / progressWidth * 100;\n    const seekTime = clickPercentage * videoRef.current.duration / 100;\n    videoRef.current.currentTime = seekTime;\n  };\n  const handleScrubberMouseDown = () => {\n    setIsScrubbing(true);\n  };\n  const handleScrubberMouseUp = () => {\n    setIsScrubbing(false);\n  };\n  const handleMouseLeave = () => {\n    if (isScrubbing) {\n      setIsScrubbing(false);\n    }\n  };\n  const handleScrubberMouseMove = event => {\n    if (isScrubbing) {\n      const progress = innerProgressRef.current.parentNode;\n      const progressWidth = progress.offsetWidth;\n      const clickPosition = event.clientX - progress.getBoundingClientRect().left;\n      const clickPercentage = clickPosition / progressWidth * 100;\n      const seekTime = clickPercentage * videoRef.current.duration / 100;\n      videoRef.current.currentTime = seekTime;\n    }\n  };\n  useEffect(() => {\n    const video = videoRef.current;\n    let animationFrameId = null;\n    const updateProgressBar = () => {\n      const innerProgress = innerProgressRef.current;\n      const scrubber = scrubberRef.current;\n      const currentTime = video.currentTime;\n      const duration = video.duration;\n      const progressPercentage = currentTime / duration * 100;\n      innerProgress.style.width = `${progressPercentage}%`;\n      scrubber.style.left = `${progressPercentage}%`;\n      animationFrameId = requestAnimationFrame(updateProgressBar);\n    };\n    video.addEventListener('timeupdate', updateProgressBar);\n    return () => {\n      video.removeEventListener('timeupdate', updateProgressBar);\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [videoRef]);\n  useEffect(() => {\n    const progressContainer = progressContainerRef.current;\n    progressContainer.addEventListener('mouseleave', handleMouseLeave);\n    return () => {\n      progressContainer.removeEventListener('mouseleave', handleMouseLeave);\n    };\n  }, [isScrubbing]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    onClick: handleProgressBarClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    ref: progressContainerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inner-progress\",\n    ref: innerProgressRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scrubber\",\n    ref: scrubberRef,\n    onMouseDown: handleScrubberMouseDown,\n    onMouseUp: handleScrubberMouseUp,\n    onMouseMove: handleScrubberMouseMove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  })));\n};\nexport default ProgressBar;","map":{"version":3,"names":["React","useRef","useEffect","useState","ProgressBar","_ref","videoRef","innerProgressRef","scrubberRef","progressContainerRef","isScrubbing","setIsScrubbing","handleProgressBarClick","event","progress","currentTarget","progressWidth","offsetWidth","clickPosition","clientX","getBoundingClientRect","left","clickPercentage","seekTime","current","duration","currentTime","handleScrubberMouseDown","handleScrubberMouseUp","handleMouseLeave","handleScrubberMouseMove","parentNode","video","animationFrameId","updateProgressBar","innerProgress","scrubber","progressPercentage","style","width","requestAnimationFrame","addEventListener","removeEventListener","cancelAnimationFrame","progressContainer","createElement","className","onClick","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","onMouseDown","onMouseUp","onMouseMove"],"sources":["C:/Users/MihaiPopa/WebstormProjects/video-player-application/src/components/ProgressBar.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\n\r\nconst ProgressBar = ({ videoRef }) => {\r\n    const innerProgressRef = useRef(null);\r\n    const scrubberRef = useRef(null);\r\n    const progressContainerRef = useRef(null);\r\n    const [isScrubbing, setIsScrubbing] = useState(false);\r\n\r\n    const handleProgressBarClick = (event) => {\r\n        const progress = event.currentTarget;\r\n        const progressWidth = progress.offsetWidth;\r\n        const clickPosition = event.clientX - progress.getBoundingClientRect().left;\r\n        const clickPercentage = (clickPosition / progressWidth) * 100;\r\n        const seekTime = (clickPercentage * videoRef.current.duration) / 100;\r\n\r\n        videoRef.current.currentTime = seekTime;\r\n    };\r\n\r\n    const handleScrubberMouseDown = () => {\r\n        setIsScrubbing(true);\r\n    };\r\n\r\n    const handleScrubberMouseUp = () => {\r\n        setIsScrubbing(false);\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        if (isScrubbing) {\r\n            setIsScrubbing(false);\r\n        }\r\n    };\r\n\r\n    const handleScrubberMouseMove = (event) => {\r\n        if (isScrubbing) {\r\n            const progress = innerProgressRef.current.parentNode;\r\n            const progressWidth = progress.offsetWidth;\r\n            const clickPosition = event.clientX - progress.getBoundingClientRect().left;\r\n            const clickPercentage = (clickPosition / progressWidth) * 100;\r\n            const seekTime = (clickPercentage * videoRef.current.duration) / 100;\r\n\r\n            videoRef.current.currentTime = seekTime;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const video = videoRef.current;\r\n        let animationFrameId = null;\r\n\r\n        const updateProgressBar = () => {\r\n            const innerProgress = innerProgressRef.current;\r\n            const scrubber = scrubberRef.current;\r\n            const currentTime = video.currentTime;\r\n            const duration = video.duration;\r\n            const progressPercentage = (currentTime / duration) * 100;\r\n\r\n            innerProgress.style.width = `${progressPercentage}%`;\r\n            scrubber.style.left = `${progressPercentage}%`;\r\n\r\n            animationFrameId = requestAnimationFrame(updateProgressBar);\r\n        };\r\n\r\n        video.addEventListener('timeupdate', updateProgressBar);\r\n\r\n        return () => {\r\n            video.removeEventListener('timeupdate', updateProgressBar);\r\n            cancelAnimationFrame(animationFrameId);\r\n        };\r\n    }, [videoRef]);\r\n\r\n    useEffect(() => {\r\n        const progressContainer = progressContainerRef.current;\r\n        progressContainer.addEventListener('mouseleave', handleMouseLeave);\r\n\r\n        return () => {\r\n            progressContainer.removeEventListener('mouseleave', handleMouseLeave);\r\n        };\r\n    }, [isScrubbing]);\r\n\r\n\r\n    return (\r\n        <div className=\"progress-bar\" onClick={handleProgressBarClick}>\r\n            <div className=\"progress\" ref={progressContainerRef}>\r\n                <div className=\"inner-progress\" ref={innerProgressRef}></div>\r\n                <div\r\n                    className=\"scrubber\"\r\n                    ref={scrubberRef}\r\n                    onMouseDown={handleScrubberMouseDown}\r\n                    onMouseUp={handleScrubberMouseUp}\r\n                    onMouseMove={handleScrubberMouseMove}\r\n                ></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;"],"mappings":"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"},"metadata":{},"sourceType":"module"}